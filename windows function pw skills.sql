-- 1. **Rank the customers based on the total amount they've spent on rentals.**
select customer_id, sum(amount) as tot_spent_amount, rank() over(order by sum(amount) desc)
 as customer_rank from payment group by customer_id order by sum(amount) desc;



-- 2.**Calculate the cumulative revenue generated by each film over time.**
-- select * from film; -- film_id
-- select * from payment; -- rental_id, customer_id
-- select * from inventory; -- film_id, inventory_id
-- select * from rental; -- inventory,rental_id, customer_id
select title,sum(amount) as total_ravenue from film f left join inventory i on f.film_id = i.inventory_id left join
rental r on i.inventory_id = r.inventory_id left join payment p on r.rental_id = 
p.rental_id group by title order by sum(amount) desc;


-- 3. **Determine the average rental duration for each film, considering
--  films with similar lengths.**
-- select * from film;
select title,length, avg(rental_duration) over() as avg_rental_duration from film order by length;

 
 
 -- 4.**Identify the top 3 films in each category based on their rental counts.**
-- select * from film; -- film_id
-- select * from category;-- category_id
-- select * from film_category; -- film_id, category_id
-- select * from rental; -- inventory_id, rental_id
-- select * from inventory ;-- inventory_id, film_id
with cte_statement as (select title,name, count(rental_id) over(partition by title) as rental_count,row_number() over
(partition by name) as film_rank from film f left join inventory i 
on f.film_id = i.film_id left join rental r on i.inventory_id = r.inventory_id
left join film_category fa on f.film_id = fa.film_id left join category c on fa.category_id
= c.category_id ) select title,name,rental_count,film_rank from cte_statement where film_rank<=3;


-- 5.**Calculate the difference in rental counts between each customer's total rentals and the average rentals
-- across all customers.**
select customer_id, count(rental_id) as rental_count, avg(count(rental_id)) over() avg_rental_count 
,(count(rental_id)- avg(count(rental_id)) over() ) rental_diff
from rental group by customer_id ;


-- 6.Find the monthly revenue trend for the entire rental store over time.
select sum(amount) as tot_revenue, month(payment_date) as month_name from payment group by month(payment_date) 
order by month(payment_date);


-- 7. Identify the customers whose total spending on rentals falls within 
-- the top 20% of all customers.
with customer_spending as ( select customer_id, sum(amount) as tot_spending, ntile(5) 
 over(order by sum(amount) desc) as ntile_rank from payment group by customer_id )
 select customer_id, tot_spending from customer_spending where ntile_rank =1
 ;


-- 8.Calculate the running total of rentals per category, ordered by rental 
-- count.
select * from rental; -- rental_id, inventory_id, customer_id
select * from film_category; -- film_id, category_id
select * from category; -- category_id
select * from inventory; -- film_id, invetory_id
select name, count(rental_id) as tot_rental from rental r left join inventory i on r.inventory_id = i.inventory_id
left join film_category fa on i.film_id = fa.film_id left join category c on
fa.category_id = c.category_id group by name order by count(rental_id); 


-- 9.Find the films that have been rented less than the average rental count 
-- for their respective categories.
with cte_statement as (select distinct title, count(rental_id) as tot_rental, avg(count(rental_id)) 
over(partition by category_id) as avg_rental from film f left join inventory i on f.film_id = i.film_id left join
 rental r on i.inventory_id = r.inventory_id left join film_category fa 
 on f.film_id = fa.film_id group by title,f.film_id, category_id) select title,tot_rental, avg_rental
 from cte_statement where tot_rental < avg_rental;


-- 10.Identify the top 5 months with the highest revenue and display the revenue 
-- generated in each month.
select monthname(payment_date)as month_name,sum(amount) as tot_revenue
 from payment group by monthname(payment_date) order by tot_revenue desc 
 limit 5;
 
 